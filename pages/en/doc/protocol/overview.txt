====== Specification Overview ======

This is an overview of specification of the eXtensible Binary Universal Protocol as it is defined in work release 0.1.23 (WR-23).

This should be usable for example to get idea how is the internal structure of protocol defined.

This document is not final and it's also incomplete.

For full specification, please see other parts of [[en:doc:catalog|specification]] in documentation section.

===== Tree Structure (Level 0) =====

Lowest protocol's level defines basic tree structure using two primitive types.

  * Binary blob (sequence of bytes)
  * Natural non-negative integer number

See complete [[en:doc:protocol:tree_structure|specification of tree structure]].

==== UBNumber Encoding ====

UBNumber is encoding used for representation of instance of countable infinite set stored as one or more bytes (similar to UTF-8 encoding). 

First, non-zero bits are counted for length and then rest of bits is used as value while value is also incremented so that there is only one code for each number.

Most native encoding using UBNumber is UBNatural for representation of a natural non-negative integer number.

//Examples of the UBNatural codes (sequence of bits = represented value)://

<html><pre class="code">
 <span style="color:green">0</span>0000000                             = 0
 <span style="color:green">0</span>0000001                             = 1
 <span style="color:green">0</span>0000010                             = 2
 <span style="color:green">0</span>0000011                             = 3
 ...
 <span style="color:green">0</span>1111111                             = 7Fh = 127
 <span style="color:green">10</span>000000 00000000                    = 80h = 128
 <span style="color:green">10</span>000000 00000001                    = 81h = 129
 ...
 <span style="color:green">10</span>111111 11111111                    = 407Fh = 16511
 <span style="color:green">110</span>00000 00000000 00000000           = 4080h = 16512
 ...
</pre></html>

Various interpretations can be mapped on UBNumber encoding. For this level there are defined two:

  * UBNatural encoding using directly value from UBNumber
  * UBENatural where value 7Fh is reserved for infinity constant and higher values are shifted by one

==== Document ====

Document starts with 6 bytes long blob called "Document Header" followed by a single block called "Root Block" and optional blob called "Extended Area".

Header for current version of protocol is (hexadecimal):

<code>
FE 00 58 42 00 02
</code>

==== Block ====

Each block starts with single value:

  UBNatural attributePartSize

If **attributePartSize = 0** then this block is called "Terminator" and block ends. Otherwise it is followed by value:

  UBENatural dataPartSize

If **attributePartSize = count of bytes used by dataPartSize** then this block is called "Data Block" and binary blob follows which has length in bytes specified by dataPartSize value and block ends.

If **attributePartSize > count of bytes used by dataPartSize** then this block is called "Node Block" and a sequence of attributes follows until **sum of count of bytes used by attributes = attributePartSize - count of bytes used by dataPartSize**.

  UBNumber attribute

After attributes, sequence of blocks follows until **sum of block sizes = dataPartSize** and block ends.

If **dataPartSize = infinity** for data block then binary blob is ended by a sequence of two zero bytes. A sequence of two bytes where first is zero followed by a non zero byte is considered a sequence of nonstoping zero bytes. The non zero byte defines the length of the sequence.

If **dataPartSize = infinity** for node block then sequence of data blocks is ended by the terminator.

//See following picture for clarification://
{{ en:doc:protocol:images:block_structure.png?400 |Block Structure}}

===== Block Types (Level 1) =====

Level 1 introduces block types and catalog. For this level all non-listed attributes in node blocks are considered zero.

See complete [[en:doc:protocol:block_types|specification of block types]].

==== Block Type ====

First two attributes in node block are interpreted as follows:

  UBNatural - TypeGroup
  UBNatural - BlockType

Blocks types are organized into **Groups**. Type group with value 0 is called **Basic Group** and it's meaning is build-in and defined in the protocol itself.

TypeGroup value specifies to which group each block belongs. BlockType value specifies particular block in the corresponding group where meaning of single groups and block types is defined in document using basic blocks.

==== Basic Group ====

Basic group uses TypeGroup = 0. Basic blocks provides ability to store block type definitions and links to catalog.

=== Undefined (BlockType 0) ===

This block is used for unknown block types or data padding.

=== Type Declaration (BlockType 1) ===

Type declaration block provides ability to specify allowed range of type groups. This block is typically root block in regular document. It has following values:

UBNatural - GroupsReserved\\
UBPointer - GroupSpecList\\
UBPointer - DocumentRoot\\
UBNatural - PreserveCount\\

FIXME

==== Catalog ====

FIXME

===== Transformations (Level 2) =====

FIXME