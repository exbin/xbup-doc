====== Parsers ======

Parser is meant here as a program which process input data (binary stream) and returns sequence or other structure of tokens, defined fractions of input data optionally with additional information. Parsers are typically used for compilation of source code written in particular programming language and returns key words, variable and method names and other text components for further compilation steps.

Program for reverse process when tokens/fragments are composed into whole document will be called "builder" in this document.

===== Token Types =====

Level 0 of the protocol defines following 4 token types:

  * BEGIN - Has parameter "terminated" of boolean type
  * ATTRIBUTE - Has parameter "value" of UBNumber type
  * DATA - Has parameter "data" of sequence of bytes type
  * END

Level 1 of the protocol defines same four token types + one additional token type:

  * TYPE - Has parameter "type" of type of block type

===== Parser Types =====

For this project, following types of parsers will be considered for implementation:

  * Event Parser - When parser finds next token, it will send it to the given interface
  * Pull Parser - Parser provides method to request next single token to be processed from document
  * Object Model Parser (Tree Parser) - Parser build object model of given document in memory
  * Command Parser - Parser allows to seek/traverse document

For each parser there is also builder with matching interface and/or additional method for editation.

Both event and pull parser are similar and have low memory footprint as they need only to keep current position and process one token at the time. Object model on the other hand needs lots of memory proportional to document size, while command parser is hybrid as it internally uses all previous parsers and allows to build object model for document nodes as well.

===== Parser Status =====

Leve 0 parser may be reach in one of the following states when processing data - for the needs of finer processing, it is possible to distinguish whether the parser is at the beginning or within the region:

  * Start/Head - Parser is at the beginning of the file / Parser is located inside the file header
  * Node - Parser is at the beginning of the block or reads its header (length)
  * Attribute - Parser reads or will read an attribute
  * Data - Parser reads or will read data of the the data block
  * Extended - Parser reads or will read data from extended area
  * Eof (End of file) - Parser reached the end of file

===== Fault Messages =====

When parsing, a document may be subject to a number of errors at various levels. If the design of the language allows an exception to be raised by the parser (exception), or runtime error, it's then possible to catch it for processing errors. Following fault messages are currently defined:

  * Corrupted or missing header - Format header header doesn't match correct format
  * Unsupported header - Format header version number is unsupported
  * Unexpected terminator - Terminator block present in document, when there is no infinite block opened for termination
  * Attribute Overflow - Size of the attribute is greater than space allocated for attribute section
  * Block Overflow - Block size is greater than space allocated for blocks
  * End of data reached - Unexpected end of input data reached when document processing was still not finished

Additional messages could relate to other limitations of implementation:

  * Unsupported - Function is not implemented / supported
  * Value is too big - Implementation doesn't support bigger values

===== Event Parser =====

This parser processes document and every time it is able to identify token, it will pass it to object with given interface. This allows to process whole document token by token while flow is controlled by sender.

===== Pull Parser =====

This parser opens document and every time it is requested, id provides next token. This allows to process whole document token by token while flow is controlled by receiver.

Builder for this parser construct document from tokens they are send to it.

===== Object Model Parser =====

These parsing classes process the entire input data and create an object copy in the memory (DOM - Document Object Model). The implementation works so that it checks file header and retrieve root node and all it's children. Created instances also provide builder methods to reconstruct structure into output data.

Builder for this parser request tokens via interface to construct document.

===== Command Parser =====

Command parser works on similar basis like file system. It allows to browse document as a tree and access particular nodes as requested. If editation is allowed, it is also possible to remove or edit nodes and add new ones, while changes will be stored in memory until saving is requested.

===== More Parsers =====

Other parsers might be created, like for example parsers using whole blocks/nodes as tokens.

===== Links =====

Parsing - [[http://en.wikipedia.org/wiki/Parsing]]\\
Pull Parsing - [[http://www.xmlpull.org|XML Pull Parsing]]\\
Document Object Model - [[http://www.w3.org/XML/DOM|XML DOM]]\\
