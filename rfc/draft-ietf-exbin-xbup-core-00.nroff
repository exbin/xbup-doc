.pl 10.0i
.po 0
.ll 7.2i
.lt 7.2i
.nr LL 7.2i
.nr LT 7.2i
.ds LF Miroslav Hajda 
.ds RF FORMFEED[Page %]
.ds LH Internet-Draft
.ds RH <Issue Date>
.ds CH XBUP
.ds CF Expires <Expiry Date>
.hy 0
.nh
.ad l
.in 0

.nf
.tl 'Internet-Draft'XBUP'Miroslav Hajda'
.tl 'Intended Status: Proposed Standard''(ExBin Project)'
.tl 'Expires: <Expiry Date>''<Issue Date>'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 2
Extensible Binary Universal Protocol (XBUP)
draft-ietf-exbin-xbup-core-00
.fi
.in 3


.ti 0
Abstract

The Extensible Binary Universal Protocol (XBUP) is a general purpose binary data protocol and file format with primary focus on data abstraction and transformation.

This documentation describes specification of bottom levels of protocol and set of basic data types and recommended API.

.ti 0
Contributing

This document is being worked on by ExBin Project. Primary goal is to gather comments and raise interest in this project.

To participate on development of this project, following communications are available:

TODO

.ti 0
Status of this Memo

This Internet-Draft is submitted to IETF in full conformance with the provisions of BCP\078 and BCP\079.

Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups.  Note that other groups may also distribute working documents as \%Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months and may be updated, replaced, or obsoleted by other documents at any time.  It is inappropriate to use Internet-Drafts as reference material or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at \%http://www.ietf.org/1id-abstracts.html

The list of Internet-Draft Shadow Directories can be accessed at http://www.ietf.org/shadow.html


.ti 0
Copyright and License Notice\" Boilerplate from December 2009

.\" NOTE: Insert current <year> in the following paragraph
Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.

This document is subject to BCP\078 and the IETF Trust's Legal Provisions Relating to IETF Documents \%(http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Simplified BSD License text as described in Section\04.e of the Trust Legal Provisions and are provided without warranty as described in the Simplified BSD License.



.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Objectives  . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.2  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  4
   2  XBUP Specification  . . . . . . . . . . . . . . . . . . . . . .  4
     2.1 Level 0: Tree Structure  . . . . . . . . . . . . . . . . . .  4
       2.1.1 UBNumber Encoding  . . . . . . . . . . . . . . . . . . .  4
       2.1.2 Document . . . . . . . . . . . . . . . . . . . . . . . .  5
       2.1.3 Block  . . . . . . . . . . . . . . . . . . . . . . . . .  5
     2.2 Level 1: Block Types . . . . . . . . . . . . . . . . . . . .  6
       2.2.1 Block Type . . . . . . . . . . . . . . . . . . . . . . .  6
       2.2.2 Basic Group  . . . . . . . . . . . . . . . . . . . . . .  7
       2.2.3 Undefined  . . . . . . . . . . . . . . . . . . . . . . .  7
   3. Todo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7
   3 Security Considerations  . . . . . . . . . . . . . . . . . . . .  8
   4 IANA Considerations  . . . . . . . . . . . . . . . . . . . . . .  8
   5 References . . . . . . . . . . . . . . . . . . . . . . . . . . .  8
     5.1  Normative References  . . . . . . . . . . . . . . . . . . .  8
     5.2  Informative References  . . . . . . . . . . . . . . . . . .  8
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . .  8
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1  Introduction

The Extensible Binary Universal Protocol (XBUP) is a general purpose binary data protocol and file format with primary focus on abstraction and automatic data transformation.

Key features:

 *  Unified block-tree structure - Minimalistic core structure based on integer and blobs only

 *  Build-in and custom data types - Data type definitions and catalog of types

 *  Transformations framework - Automatic and manual data conversions and compatibility handling

In general, XBUP is an attempt to create new and improved binary data format which would utilize advancements from markup languages like SGML/XML or from more recent programming languages, and bring them into world of binary data.

For example:

 *  Extensibility

 *  Unconstraint values

 *  Links (URL)

 *  Namespaces

Primary focus on abstraction makes this protocol somewhat different compare to other similar binary formats which focus on efficiency, serialization or binary representation of mark-up language. Please see "formats comparison" for better idea.

.ti 0
1.1  Objectives

The primary goal of this project is to create communication protocol/data format with the following characteristics:

  * Universal - Capable to represent any type of data, suitable for persistent and long-term storage and streaming

  * Independent - Not tightly linked to particular spoken language or product, processing architecture or programming language

  * Declarative - Self sufficient for data type definition and ability to build data types on top of each other and link them together

  * Efficiency - Effective data compacting / compression support for plain binary and structured data

  * Flexible - Support for data transformations, compatibility and extensibility

.ti 0
1.2  Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC2119].

This specification makes use of the following terminology:

Byte: Used in the sense of 8-bits binary data value as a synonym for "octet".

Parser:

Token:

Stream:

.ti 0
2  XBUP Specification

Protocol is specified bottom up by levels. Each level build on top of previous level adding new features and limitations.

.ti 0
2.1 Level 0: Tree Structure

Lowest protocol's level defines basic tree structure using two primitive types.

  * Binary blob (sequence of bytes)
  * Natural non-negative integer number

See complete [[en:doc:protocol:tree_structure|specification of tree structure]].

.ti 0
2.1.1 UBNumber Encoding

UBNumber is encoding used for representation of instance of countable infinite set stored as one or more bytes (similar to UTF-8 encoding). 

First, non-zero bits are counted for length and then rest of bits is used as value while value is also incremented so that there is only one code for each number.

Most native encoding using UBNumber is UBNatural for representation of a natural non-negative integer number.

//Examples of the UBNatural codes (sequence of bits = represented value)://

00000000                                     = 0
.br
00000001                                     = 1
.br
00000010                                     = 2
.br
00000011                                     = 3
.br
...
.br
01111111                                     = 7Fh = 127
.br
10000000 00000000                    = 80h = 128
.br
10000000 00000001                    = 81h = 129
.br
...
.br
10111111 11111111                    = 407Fh = 16511
.br
11000000 00000000 00000000   = 4080h = 16512
.br
...

Various interpretations can be mapped on UBNumber encoding. For this level there are defined two:

  * UBNatural encoding using directly value from UBNumber

  * UBENatural where value 7Fh is reserved for infinity constant and higher values are shifted by one

.ti 0
2.1.2 Document

Document starts with 6 bytes long blob called "Document Header" followed by a single block called "Root Block" and optional blob called "Extended Area".

Header for current version of protocol is (hexadecimal):

<code>
FE 00 58 42 00 02
</code>

.ti 0
2.1.3 Block

Each block starts with single value:

  UBNatural attributePartSize

If **attributePartSize = 0** then this block is called "Terminator" and block ends. Otherwise it is followed by value:

  UBENatural dataPartSize

If **attributePartSize = count of bytes used by dataPartSize** then this block is called "Data Block" and binary blob follows which has length in bytes specified by dataPartSize value and block ends.

If **attributePartSize > count of bytes used by dataPartSize** then this block is called "Node Block" and a sequence of attributes follows until **sum of count of bytes used by attributes = attributePartSize - count of bytes used by dataPartSize**.

  UBNumber attribute

After attributes, sequence of blocks follows until **sum of block sizes = dataPartSize** and block ends.

If **dataPartSize = infinity** for data block then binary blob is ended by a sequence of two zero bytes. A sequence of two bytes where first is zero followed by a non zero byte is considered a sequence of nonstoping zero bytes. The non zero byte defines the length of the sequence.

If **dataPartSize = infinity** for node block then sequence of data blocks is ended by the terminator.

//See following picture for clarification://
{{ en:doc:protocol:images:block_structure.png?400 |Block Structure}}

.ti 0
2.2 Level 1: Block Types

Level 1 introduces block types and catalog. For this level all non-listed attributes in node blocks are considered zero.

See complete [[en:doc:protocol:block_types|specification of block types]].

.ti 0
2.2.1 Block Type

First two attributes in node block are interpreted as follows:

  UBNatural - TypeGroup

  UBNatural - BlockType

Blocks types are organized into **Groups**. Type group with value 0 is called **Basic Group** and it's meaning is build-in and defined in the protocol itself.

TypeGroup value specifies to which group each block belongs. BlockType value specifies particular block in the corresponding group where meaning of single groups and block types is defined in document using basic blocks.

.ti 0
2.2.2 Basic Group

Basic group uses TypeGroup = 0. Basic blocks provides ability to store block type declarations, definitions and links to catalog.

.ti 0
2.2.3 Undefined

This block is used for unknown block types or data padding.

//Block: Basic (0) / Unknown (0)//

.ti 0
3. Todo

.\" Comment line providing info for the Authors or the RFC Editor
<Document text>

.in 6
.nf
Definitions and code {
  line 1
  line 2
}
.fi
.in 3

.\" Directives (e.g .ti and .in) and escape sequences (\, \&, \%, \" and \0) are used to control
.\" Formatting and are not displayed in the text document.

Special characters examples:
 
The characters \0, \&, \%, \" are not shown in text.
.\"
.\" You can display these character sequences in the text document by
.\" inserting the escape character '\'.
However, the characters \\0, \\&, \\%, \\" are displayed.

\&.ti 0  is displayed in text instead of used as a directive. 
.br
\&.\\"  is displayed in document instead of being treated as a comment

C:\\dir\\subdir\\file.ext  Shows inclusion of backslash "\\".


.bp
.ti 0
3 Security Considerations

<Security considerations text>


.ti 0
4 IANA Considerations


<IANA considerations text>


.ti 0
5 References

.ti 0 
5.1  Normative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 2119;KEYWORDS, 1776, RFC1925;TRUTHS
.\" \# ERF -- End of managed reference list
.\" ----------------------------------------
.\" The reference list can be changed at any time by altering the RFC list in the line below the .\" \# REF directive
.\" In order to execute any change, click on the 'Update All' button or select "Update 'Table of Contents' and References"
.\" from the "Edit" menu or press <F3>.
.\" NOTE: Managed reference list requires NroffEdit version 1.40 or later.

.ti 0
5.2  Informative References

.in 14
.\" \# REF  -- Managed reference list. Syntax: [RFC]nnnn[;Label], ... ,[RFC]nnnn[;Label]
.\" \# 3514;EVILBIT, 5513, 5514
.\" \# ERF -- End of managed reference list
.in 3


.ti 0
Authors' Addresses

.sp
.nf
Miroslav Hajda
and
Zdechov, Czech Repubic

EMail: name@example.com
.sp
.fi

